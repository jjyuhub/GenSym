name: Scala CI & Benchmarking (Solver Efficiency)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 1'  # Run benchmarking every Monday

jobs:
  build:

    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./

    strategy:
      matrix:
        llvm-version: [11, 14]
        solver: [Z3, STP]

    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Set up LLVM and Clang
      run: |
        sudo apt-get update && sudo apt-get install -y curl gnupg2 software-properties-common
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | gpg --dearmor | sudo tee /usr/share/keyrings/llvm-keyring.gpg > /dev/null
        echo "deb [signed-by=/usr/share/keyrings/llvm-keyring.gpg] http://apt.llvm.org/focal/ llvm-toolchain-focal-${{ matrix.llvm-version }} main" | sudo tee /etc/apt/sources.list.d/llvm.list
        sudo apt-get update
        sudo apt-get install -y clang-${{ matrix.llvm-version }} llvm-${{ matrix.llvm-version }}

    - name: Verify Clang/LLVM Installation
      run: |
        clang-${{ matrix.llvm-version }} --version
        llvm-config-${{ matrix.llvm-version }} --version

    - name: Set up JDK 11 (Temurin)
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Set up dependencies
      run: |
        sudo apt-get update
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y \
          git g++ cmake bison flex libboost-all-dev python3 \
          perl minisat curl wget locales

    - name: Generate test files (LLVM IR)
      run: |
        cd benchmarks/llvm && make gensym
        cd ../demo-benchmarks && make gensym
        cd ../external-lib && make gensym
        cd ../oopsla20 && make generate_sse
        cd ../test-comp/array-examples && make gensym
        cd ../../test-comp/array-programs && make gensym
        cd ../../klee-posix-fs && make

    - name: Install Z3
      if: matrix.solver == 'Z3'
      run: |
        cd third-party
        wget https://github.com/Z3Prover/z3/releases/download/z3-4.8.14/z3-4.8.14-x64-glibc-2.31.zip
        unzip z3-4.8.14-x64-glibc-2.31.zip
        cd z3-4.8.14-x64-glibc-2.31
        sudo cp include/* /usr/include/
        sudo cp bin/libz3.so /usr/lib/x86_64-linux-gnu/
        sudo ldconfig

    - name: Install STP
      if: matrix.solver == 'STP'
      run: |
        cd third-party/stp
        mkdir -p build
        cd build
        cmake ..
        make -j$(nproc)
        sudo make install
        sudo ldconfig

    - name: Install wasmfx-tools
      run: |
        cd third-party/wasmfx-tools
        cargo build --release

    - name: Generate models
      run: sbt 'runMain gensym.GenerateExternal'

    - name: Run tests & Capture Performance Data for ${{ matrix.solver }}
      run: |
        echo "Running performance tests with ${{ matrix.solver }}..."
        /usr/bin/time -v sbt 'testOnly gensym.TestImpCPSGS_${{ matrix.solver }}' 2>&1 | tee benchmark_results_${{ matrix.solver }}.log
        /usr/bin/time -v sbt 'testOnly gensym.TestLibrary' 2>&1 | tee -a benchmark_results_${{ matrix.solver }}.log
        /usr/bin/time -v sbt 'testOnly gensym.wasm.TestEval' 2>&1 | tee -a benchmark_results_${{ matrix.solver }}.log
        /usr/bin/time -v sbt 'testOnly gensym.wasm.TestScriptRun' 2>&1 | tee -a benchmark_results_${{ matrix.solver }}.log

    - name: Analyze & Print Performance Data for ${{ matrix.solver }}
      run: |
        echo "======================== Performance Summary (${{ matrix.solver }}) ========================"
        grep "User time" benchmark_results_${{ matrix.solver }}.log || echo "No User time found"
        grep "Elapsed (wall clock) time" benchmark_results_${{ matrix.solver }}.log || echo "No Wall time found"
        grep "Maximum resident set size" benchmark_results_${{ matrix.solver }}.log || echo "No Memory usage found"
        grep "solver queries" benchmark_results_${{ matrix.solver }}.log || echo "No Solver queries found"
        echo "=========================================================================================="

    - name: Upload Benchmark Results for ${{ matrix.solver }}
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results-${{ matrix.solver }}
        path: benchmark_results_${{ matrix.solver }}.log

    - name: Cleanup
      run: |
        sudo rm -rf ~/.sbt ~/.ivy2 ~/.cache
